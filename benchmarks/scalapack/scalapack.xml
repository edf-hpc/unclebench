<?xml version="1.0" encoding="utf-8"?>
<jube>

    <include-path>
	<path> $UBENCH_PLATFORM_DIR </path>
    </include-path>
    <include from="platforms.xml" path="include-path"/>

    <multisource>
      <source protocol="https">
        <url>https://github.com/RomaricKanyamibwa/scalapack-benchmarks/archive/</url>
        <file>master.zip</file>
      </source>

      <!-- comment the above source and uncomment the following section and use if the cluster can not access git -->
   <!-- <source protocol="local" >
       <file>/mnt/.tgvdv2/projets/projets.002/ccnhpc.066/Benchmarks/master.zip</file>
   </source> -->

   </multisource>
    
    <benchmark name="ScaLAPACK" outpath="benchmark_runs">
	<comment>ScaLAPACK benchmarks</comment>
	
	<fileset name="source">
	    <link> $UBENCH_RESOURCE_DIR/scalapack/master.zip</link>
	    <prepare>unzip master.zip </prepare>
	</fileset>
	
	<parameterset name="variant_set">
        <parameter name="size_index">0</parameter>
        <parameter name="block_index">0</parameter>
        
        

        

        
        <parameter name="block_size" mode="python">
		["64","128","256","512","1024","2048","4096","8192"][$block_index]
	    </parameter>
        
        <parameter name="matrix_size" mode="python">
		["10000","20000","50000","100000","150000"][$size_index]
	    </parameter>

        

 	    <parameter name="variant_NB">
		192
	    </parameter>
	    
	    <parameter name="memory_proportion">
		0.1
	    </parameter>

	    <!-- Choose N to avoid exceeding memory_proportion of available memory -->
	    <parameter name="variant_Ntemp" mode="python" type="float" separator="??" >
		(${memory_proportion}*${nodes}*(${GB_per_node})*1e9/8) ** 0.5		
	    </parameter>
	    
 	    <parameter name="variant_N" mode="python" type="int" separator="??" >
		int( round( ${variant_Ntemp} / ${variant_NB} ) * ${variant_NB})
	    </parameter>
	    
	</parameterset>

	<parameterset name="compiler_opts">
	    <parameter name="variant_v">0</parameter>

        <parameter name="exec_fort" mode="python">
			["dgemm","cholesky","svd","qr","lu"][$variant_v]
	    </parameter>

        <parameter name="exec_cpp" mode="python">
			["dgemm","cholesky","svd","inverse","linsolve"][$variant_v]
	    </parameter>

        <parameter name="in_file" mode="python">
	    	["","$block_size 2.54", "52.54", "12.54", "-2.54"][$variant_v]
	    </parameter>

	  	<parameter name="arch" type="string">
	    	${comp_version}
	  	</parameter>
        


        <parameter name="lang_index">0</parameter>
	    <parameter name="lang" mode="python">
		["Fortran","C++"][$lang_index]
	    </parameter>

        <parameter name="exec_name" mode="python">
		["$exec_fort","$exec_cpp"][$lang_index]
	    </parameter>

	    <parameter name="make_args" mode="python">

	    ["","cpp EXE_NAME=$exec_name"][$lang_index]

	    </parameter>

	</parameterset>
	
	<!-- =====================  Compile  ===================== -->
	<step name="compile" export="true">
	    	    
	    <!-- Choose compiler and MPI versions -->
	    <use from="platform.xml"> compiler_set </use>
	    <use from="platform.xml"> mpi_set </use>

	    <use> compiler_opts </use>
	    
	    <!-- substitute compiler in makefile -->
	    <use>source</use>
	    
	    <!-- Load environment -->
	    <do> module purge </do>
	    <do> module load $module_compile $module_mpi $module_blas </do>

	    <do work_dir="scalapack-benchmarks-master">
            pwd;
	        make TARGET=${arch} ${make_args}
	    </do>

	</step>

	<!-- ====================  Execute  ===================== -->
	
	<fileset name="binaries">
	    <link rel_path_ref="internal" directory="compile/scalapack-benchmarks-master/bin">
		${exec_name}
	    </link>
<!--         <link rel_path_ref="internal" directory="compile/scalapack-benchmarks-master" >in.txt</link> -->
<!-- 	    <link>pq_script.py</link> -->
	</fileset>

	<parameterset name="system_parameters" init_with="platform.xml">
	    <parameter name="nodes" type="int">1</parameter>
	    <parameter name="taskspernode" mode="python" type="int">$NUMA_regions*$cores_per_NUMA_region</parameter>
	    <parameter name="threadspertask" type="int">1</parameter>
	    <parameter name="executable">./${exec_name} ${matrix_size} ${matrix_size} ${matrix_size}</parameter>
	    <parameter name="modules">$module_compile $module_mpi $module_blas</parameter>
	    <parameter name="timelimit">00:40:00</parameter>
	</parameterset>

	<parameterset name="execute_set" init_with="platform.xml">

	    <parameter name="args_starter" separator="??">
		${binding_full_node}
	    </parameter>
	    
	</parameterset>
	
	<step name="execute" depend="compile">
	  
	  <use from="platform.xml">cluster_specs</use>
	  <use>binaries</use>

	  <use>execute_set</use>
	  <use>system_parameters</use>
	  <use>variant_set</use>

	 

	  <use from="platform.xml">jobfiles</use>
	  <use from="platform.xml">execute_sub</use>

	  <!--<do> ./pq_script.py $tasks </do>-->
      <do>echo "${matrix_size} ${block_size} $in_file $nodes $taskspernode" >> in.txt</do>
	  <do done_file="$done_file">$submit $submit_script</do>
	 	  
	</step>
	
	<!-- =====================  Analyze  ===================== -->

      <patternset name="pattern">
	  <pattern name="elapsed_time" type="float" unit="s">
	      .*took\s+${jube_pat_fp}
	  </pattern>
      <pattern name="scalapack" type="float" unit="Gflop/s">
	      .*perf:\s+${jube_pat_fp}
	  </pattern>
      <pattern name="N" type="int">
	     .*Num\s+rows\s+$jube_pat_int
	  </pattern>
      <pattern name="BlockSize" type="int">
	      .*size\s+$jube_pat_int
	  </pattern>
	  <pattern name="Pr" type="int">
	     .*processor\s+rows\s+$jube_pat_int
	  </pattern>
	  <pattern name="Pc" type="int">
	     .*cols\s+$jube_pat_int
	  </pattern>
      </patternset>


      <analyzer name="analyse">
	  <use>pattern</use>
	  <analyse step="execute"><file>out_${exec_name}.txt</file></analyse>
      </analyzer>

      <!-- =====================  Result  ===================== -->
	
      <result>
	  <use>analyse</use>
	  <table name="result" style="csv" sort="nodes">
          <column>exec_name</column>
          <column>lang</column>
	      <column>nodes</column>
          <column>tasks</column>
          <column>N</column>
          <column>Pr</column>
          <column>Pc</column>
          <column>BlockSize</column>
	      <column>scalapack</column>
          <column format=".4f">elapsed_time</column>
	      <column>modules</column>
	  </table>
      </result>
		
    </benchmark>
</jube>
